#!/bin/zsh

# =============================================================================
#  Core Configuration
# =============================================================================

# Essential configs
for config in "$HOME"/.{aliases,theme}; do
    [[ -f "$config" ]] && source "$config"
done

# =============================================================================
#  Plugin Management
# =============================================================================

# Load all ZSH plugins
PLUGIN_DIR="$HOME/.zsh"
if [[ -d "$PLUGIN_DIR" ]]; then
    # Load plugins in specific order (dependencies first)
    plugins=(
        "zsh-autosuggestions/zsh-autosuggestions.zsh"
        "zsh-syntax-highlighting/zsh-syntax-highlighting.zsh"
    )

    for plugin in "${plugins[@]}"; do
        plugin_path="$PLUGIN_DIR/$plugin"
        [[ -f "$plugin_path" ]] && source "$plugin_path"
    done
fi

# =============================================================================
#  Development Environment
# =============================================================================

# Java Version Management
if /usr/libexec/java_home -V &>/dev/null; then
    export JAVA_17_HOME=$(/usr/libexec/java_home -v17 2>/dev/null)
    export JAVA_21_HOME=$(/usr/libexec/java_home -v21 2>/dev/null)
    export JAVA_HOME=$JAVA_21_HOME
fi

# Foundry
[[ -d "$HOME/.foundry/bin" ]] && export PATH="$PATH:$HOME/.foundry/bin"

# Rust
[[ -f "$HOME/.cargo/env" ]] && source "$HOME/.cargo/env"

# Go
export GOPATH="$HOME/go"
[[ -d "$GOPATH/bin" ]] && export PATH="$PATH:$GOPATH/bin"

# Python (pyenv)
export PYENV_ROOT="$HOME/.pyenv"
# Python (pyenv)
if command -v pyenv >/dev/null; then
    # Set PYENV_ROOT and add to PATH
    export PYENV_ROOT="$HOME/.pyenv"
    export PATH="$PYENV_ROOT/bin:$PATH"
    
    # Initialize pyenv
    eval "$(pyenv init --path)"
    eval "$(pyenv init -)"
    
    # Initialize virtualenv if available
    if command -v pyenv-virtualenv-init >/dev/null; then
        eval "$(pyenv virtualenv-init -)"
    fi
fi

# Ruby (chruby)
if [[ -d "/opt/homebrew/opt/chruby" ]]; then
    source /opt/homebrew/opt/chruby/share/chruby/chruby.sh
    source /opt/homebrew/opt/chruby/share/chruby/auto.sh
fi

# Node Version Manager
export NVM_DIR="$HOME/.nvm"
if [[ -d "$NVM_DIR" ]]; then
    [ -s "$NVM_DIR/nvm.sh" ] && source "$NVM_DIR/nvm.sh"
    [ -s "$NVM_DIR/bash_completion" ] && source "$NVM_DIR/bash_completion"
fi

# Cargo Rust
export PATH="$HOME/.cargo/bin:$PATH"

# =============================================================================
#  Package Management
# =============================================================================

# Homebrew Configuration
export HOMEBREW_CASK_OPTS="--no-quarantine"
export HOMEBREW_NO_ANALYTICS=1
export HOMEBREW_NO_ENV_HINTS=1

# =============================================================================
#  Shell Configuration
# =============================================================================


#  Performance Optimization
# =============================================================================

# Compile zsh files if needed
for config_file ($HOME/.z{shrc,shenv,profile}); do
    if [[ -f "$config_file" && (! -f "$config_file.zwc" || "$config_file" -nt "$config_file.zwc") ]]; then
        zcompile "$config_file"
    fi
done